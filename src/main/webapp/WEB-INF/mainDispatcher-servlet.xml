<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jms="http://www.springframework.org/schema/jms"
       xmlns:ehcache="http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="
           http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
           http://www.springframework.org/schema/context
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/mvc 
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
           http://www.springframework.org/schema/jms 
           http://www.springframework.org/schema/jms/spring-jms.xsd
           http://activemq.apache.org/schema/core 
           http://activemq.apache.org/schema/core/activemq-core.xsd
           http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring
           http://ehcache-spring-annotations.googlecode.com/svn/schema/ehcache-spring/ehcache-spring-1.1.xsd
           http://www.springframework.org/schema/task
           http://www.springframework.org/schema/task/spring-task-3.0.xsd">
      
    <!-- Allows us to use system properties as variables in this configuration file -->
    <bean id="properties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>file:///data/biocache/config/biocache-config.properties</value>
        </property>
    </bean>  
          
    <!--<context:spring-configured/>-->
    <context:component-scan base-package="au.org.ala.biocache"/>
    
    <!-- Configures the @Controller programming model -->
    <mvc:annotation-driven />
    <task:annotation-driven />

    <!-- Where to load static resources (css, js, images) -->
    <mvc:resources mapping="/static/**" location="/" />

    <bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver" p:order="10">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
        <property name="prefix" value="/WEB-INF/jsp/"/>
        <property name="suffix" value=".jsp"/>
    </bean>

    <bean id="messageSource" class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
        <property name="basename" value="/WEB-INF/messages"/>
        <property name="cacheSeconds" value="10"/><!-- loads changes without restarting container -->
        <property name="useCodeAsDefaultMessage" value="true"/>
    </bean>

    <!-- This will override the default DefaultAnnotationHandlerMapping that is created,
         and not map file extensions automagically -->
    <bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping" p:order="2">
        <property name="useDefaultSuffixPattern" value="false"/>
    </bean>

    <context:property-override location="file:///data/biocache/config/biocache-config.properties" ignore-unresolvable="true" ignore-resource-not-found="true" />
    <context:property-placeholder location="file:///data/biocache/config/biocache-config.properties" />

    <!--
      - This bean resolves specific types of exceptions to corresponding logical
      - view names for error views. The default behaviour of DispatcherServlet
      - is to propagate all exceptions to the servlet container: this will happen
      - here with all other types of exceptions.
     -->
    <bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionAttribute" value="error"/>
        <property name="defaultStatusCode" value="500"/>
        <property name="exceptionMappings">
            <props>
                <prop key="org.springframework.web.servlet.PageNotFound">error/pageNotFound</prop>
                <prop key="org.springframework.dao.DataAccessException">error/dataAccessFailure</prop>
                <prop key="org.springframework.transaction.TransactionException">error/dataAccessFailure</prop>
            </props>
        </property>
        <property name="statusCodes">
            <props>
                <prop key="error/pageNotFound">404</prop>
            </props>
        </property>
        <property name="defaultErrorView" value="error/general" />
    </bean>

    <!-- Content negotiation view resolver - uses either accept header mime type of the request
     -   or the file extention for the request URL -->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver" p:order="1">
        <property name="mediaTypes">
            <map>
                <entry key="html" value="text/html" />
                <entry key="xml"  value="application/xml"/>
                <entry key="json" value="application/json"/>
            </map>
        </property>
        <property name="defaultViews">
            <list>
                <bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <property name="marshaller">
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                            <property name="autodetectAnnotations" value="true" />
                        </bean>
                    </property>
                </bean>
                <bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView">
                    <property name="objectMapper" ref="jacksonObjectMapper" />
                </bean>
            </list>
        </property>
        <property name="defaultContentType" ref="htmlMediaType" />
        <property name="ignoreAcceptHeader" value="true" />
    </bean>

    <bean id="htmlMediaType" class="org.springframework.http.MediaType">
        <constructor-arg index="0" value="text" />
        <constructor-arg index="1" value="html" />
    </bean>
    
    <bean id="restfulClient" class="org.ala.client.util.RestfulClient"/>
        <bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter" p:order="0">
        <property name="messageConverters">
            <list>
                <bean
                    class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter">
                    <property name="objectMapper" ref="jacksonObjectMapper" />
                </bean>
            </list>
        </property>
    </bean>

    <!-- beans for RestTemplate  -->
    <bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
        <property name="messageConverters">
            <list>
                <!-- <bean class="org.springframework.http.converter.xml.SourceHttpMessageConverter"/> -->
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <bean id="jacksonObjectMapper" class="org.codehaus.jackson.map.ObjectMapper" />
    <bean id="jacksonSerializationConfig" class="org.codehaus.jackson.map.SerializationConfig"
        factory-bean="jacksonObjectMapper" factory-method="getSerializationConfig" />
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="targetObject" ref="jacksonSerializationConfig" />
        <property name="targetMethod" value="setSerializationInclusion" />
        <property name="arguments">
            <list>
                <value type="org.codehaus.jackson.map.annotate.JsonSerialize.Inclusion">NON_NULL</value>
            </list>
        </property>
    </bean>
    
    <!-- Ehcache settings @see http://blog.goyello.com/2010/07/29/quick-start-with-ehcache-annotations-for-spring/ -->
    <ehcache:annotation-driven />
 
    <ehcache:config cache-manager="cacheManager">
        <!-- interval is in minutes -->
        <ehcache:evict-expired-elements interval="60" />
    </ehcache:config>
 
    <bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
        <property name="configLocation"  value="/WEB-INF/ehcache.xml"/>
    </bean>
    
</beans>