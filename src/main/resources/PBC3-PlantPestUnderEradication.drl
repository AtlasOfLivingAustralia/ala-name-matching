package au.org.ala.sds.validation;

import au.org.ala.sds.model.SensitiveTaxon;
import au.org.ala.sds.model.SensitivityCategory;
import au.org.ala.sds.model.SensitivityZone;
import au.org.ala.sds.util.PlantPestUtils;
import au.org.ala.sds.validation.RuleState;
import au.org.ala.sds.validation.ValidationReport;
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.apache.log4j.Logger;
import org.drools.runtime.rule.RuleContext;

global ValidationReport validationReport;
global RuleState state;
global Logger logger;

import function au.org.ala.sds.validation.ValidationHelper.*;

//NC 2013-05-03: PLEASE NOTE: Until shape files are available different scenarios and their responses ARE NOT separated

rule "Temporary catch all rule for species that are under eradication"
    when
        $st : SensitiveTaxon()
        $zones: List()
        $map :Map()
        eval(SensitivityZone.isInAustralia($zones))
    then
        state.setLoadable(true);
        state.setControlledAccess(true);
        // The warning message for the submitter?
        warning(kcontext, MessageFactory.PLANT_PEST_MSG_CAT3_ALL1,
                PlantPestUtils.mapGetOrElse($map, "scientificName", $st.getTaxonName()) + ","+
                PlantPestUtils.mapGetOrElse($map, "eventDate","Unknown Date") + " and " +PlantPestUtils.getLocalityFromMapForMessage($map, $zones),
                $st.getTaxonName()
               );
                //the alert for the biosecurity authority
        alert(kcontext, MessageFactory.PLANT_PEST_MSG_CAT3_ALL2,$st.getTaxonName(), PlantPestUtils.mapGetOrElse($map, "eventDate", "Unknown Date"),
              PlantPestUtils.getLocalityFromMapForMessage($map, $zones),
              PlantPestUtils.mapGetOrElse($map, "dataResourceName",PlantPestUtils.mapGetOrElse($map,"dataResourceUid","Unknown submitting resource"))
              );
        state.setAnnotation(MessageFactory.getMessageText(MessageFactory.PLANT_PEST_MSG_CAT3_ALL3, $st.getName()));
end

//NC 2013-05-03: The rules below will come into effect when the shape files become available.

//rule "Inside PQA during eradication period"
//    when
//        $st : SensitiveTaxon()
//        $zones : List()
//        $date : Date()
//        eval(PlantPestUtils.isInZoneDuringPeriod($st, SensitivityCategory.PLANT_PEST_UNDER_ERADICATION, $zones, $date))
//    then
//        state.setLoadable(true);
//        state.setAnnotation(MessageFactory.getMessageText(MessageFactory.PLANT_PEST_MSG_CAT3_A1));
//        logger.warn("PBC3 Rule '" + kcontext.getRule().getName() + "'");
//end
//
//rule "Inside PQA earlier than eradication period"
//    when
//        $st : SensitiveTaxon()
//        $zones : List()
//        $date : Date()
//        eval(PlantPestUtils.isInZoneBeforePeriod($st, SensitivityCategory.PLANT_PEST_UNDER_ERADICATION, $zones, $date))
//    then
//        state.setLoadable(true);
//        state.setAnnotation(MessageFactory.getMessageText(MessageFactory.PLANT_PEST_MSG_CAT3_B1));
//        warning(kcontext, MessageFactory.PLANT_PEST_MSG_CAT3_B2);
//        logger.warn("PBC3 Rule '" + kcontext.getRule().getName() + "'");
//end
//
//rule "Outside PQA"
//    when
//        $st : SensitiveTaxon()
//        $zones : List()
//        eval(PlantPestUtils.isOutsideZone($st, SensitivityCategory.PLANT_PEST_UNDER_ERADICATION, $zones))
//    then
//        state.setDelegateRules("PBC1");
//        state.setComplete(false);
//        logger.warn("PBC3 Rule '" + kcontext.getRule().getName() + "'");
//end