package au.org.ala.sds.validation;

import au.org.ala.sds.model.SensitivityZone;
import au.org.ala.sds.validation.MessageFactory;
import au.org.ala.sds.validation.RuleState;
import au.org.ala.sds.validation.ValidationReport;
import java.util.List;
import org.apache.log4j.Logger;
import org.drools.runtime.rule.RuleContext;

global ValidationReport validationReport;
global RuleState state;
global Logger logger;

import function au.org.ala.sds.validation.ValidationHelper.*;

rule "In Australia"
    when
        $zones : List()
        eval(SensitivityZone.isInAustralia($zones))
    then
        state.setLoadable(false);
        warning(kcontext, MessageFactory.PLANT_PEST_MSG_CAT1_A1);
        logger.warn("PBC1 Rule '" + kcontext.getRule().getName() + "'");
end

rule "In External Territory"
    when
        $zones : List()
        eval(SensitivityZone.isExternalTerritory($zones))
    then
        state.setLoadable(true);
        info(kcontext, MessageFactory.PLANT_PEST_MSG_CAT1_B1);
        logger.warn("PBC1 Rule '" + kcontext.getRule().getName() + "'");
end

rule "In Torres Strait Zone"
    when
        $zones : List()
        eval(SensitivityZone.isInTorresStrait($zones))
    then        
        state.setDelegateRules("PBC5a");
        state.setComplete(false);
        logger.warn("PBC1 Rule '" + kcontext.getRule().getName() + "'");
end

rule "Not in Australian"
    when
        $zones : List()
        eval(SensitivityZone.isNotInAustralia($zones))
    then
        state.setLoadable(true);
        state.setAnnotation(MessageFactory.getMessageText(MessageFactory.PLANT_PEST_MSG_CAT1_D1));
        logger.warn("PBC1 Rule '" + kcontext.getRule().getName() + "'");
end